name: CI/CD Pipeline with SonarCloud

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}

jobs:
  # Tests Backend
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Run tests with coverage
        working-directory: ./backend
        run: npm test

      - name: Upload coverage to artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: backend/coverage/

  # Analyse SonarCloud
  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: [test-backend]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Run backend tests with coverage
        working-directory: ./backend
        run: npm test

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Build et Push Backend
  build-backend:
    name: Build & Push Backend
    runs-on: ubuntu-latest
    needs: [sonarcloud]
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/taskmanager-backend
          tags: |
            type=ref,event=branch
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # Build et Push Frontend
  build-frontend:
    name: Build & Push Frontend
    runs-on: ubuntu-latest
    needs: [sonarcloud]
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/taskmanager-frontend
          tags: |
            type=ref,event=branch
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend/client
          file: ./frontend/client/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # Rapport final
  report:
    name: Pipeline Report
    runs-on: ubuntu-latest
    needs: [test-backend, sonarcloud, build-backend, build-frontend]
    if: always()
    steps:
      - name: Summary
        run: |
          echo "üìä CI/CD PIPELINE REPORT"
          echo "======================="
          echo ""
          echo "üß™ Backend Tests: ${{ needs.test-backend.result }}"
          echo "üîç Code Quality: ${{ needs.sonarcloud.result }}"
          echo "üê≥ Backend Build: ${{ needs.build-backend.result }}"
          echo "üê≥ Frontend Build: ${{ needs.build-frontend.result }}"
          echo ""
          echo "üåê SonarCloud: https://sonarcloud.io/project/overview?id=meryamradouani_Tasks_Manager"
          echo ""
          if [ "${{ needs.sonarcloud.result }}" == "success" ]; then
            echo "‚úÖ Pipeline completed successfully!"
          else
            echo "‚ùå Pipeline failed"
            exit 1
          fi